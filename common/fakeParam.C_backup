/*
 * @short: provide fake rate weights at drawing level
 * @author: Izaak Neutelings (April 2018)
 *
 */
 
#include <iomanip> // for setw
#include "TROOT.h"
#include "TMath.h"
#include "TFile.h"
#include "TGraphAsymmErrors.h"
#include "TF1.h"
#include "TH2.h"
#include "TH2F.h"
#include <iostream>
#include <algorithm>
using namespace std;


TString MVAoldDM2017v1 = "MVAoldDM2017v1";
TString MVAoldDM2017v2 = "MVAoldDM2017v2";

//TString MVArerunv1    = "MVArerun";
//TString MVArerunv2    = "MVArerunv2";
//TString MVArerunv1new = "MVArerunv1new";
//
//std::vector<TString> IDs = { MVArerunv1, MVArerunv2, MVArerunv1new };

TString id;
TString year;
TString channel;
TString wp;

std::vector<Int_t> decayModes = { 0, 1, 10, 11 };

std::map<TString,std::map<Int_t,TH2F*>> fakeRates2D;
std::map<TString,std::map<Int_t,TGraphAsymmErrors*>> fakeRates;
std::map<TString,std::map<Int_t,Float_t>>            flatFakeRates;

void setID(const std::string& _id, 
	   const std::string& _year,
	   const std::string& _channel, 
	   const std::string& _wp){ 

  id = _id; 
  year = _year;
  channel = _channel;
  wp = _wp;
  std::cout << "setID : id = " << id << ", year =" << year << std::endl;
}


void readFakeRateFile(){

    

  TString filenameFR    = "/shome/ineuteli/analysis/SFrameAnalysis_ltau2017/plots/fakerate/" + year +  "/fakeRate" + year + ".root";
  TFile *file = new TFile(filenameFR);

  if(year=="2017")
    flatFakeRates = {
      {MVAoldDM2017v1, {{0, 6706./26978.},{1,12640./57044.},{10,6493./31601.}}},
      {MVAoldDM2017v2, {{0,12854./38362.},{1,16005./70304.},{10,4901./31097.}}},
    };
  else
    flatFakeRates = {
      //{MVAoldDM2017v1, {{0, 6706./26978.},{1,12640./57044.},{10,6493./31601.}}},
      {MVAoldDM2017v2, {{0,19911./60256.},{1,24114./109588.},{10,9594./61260.}}},
      //{MVAnewDM2017v1, {{0,15984./47451.},{1,21849./87487.},{10,7007./42683.},{11,1618./23603.}}}
    };

  std::cout << ">>> opening "<< filenameFR <<std::endl;

  //  for(TString id: IDs){

  //  TString wp = "T";
  
  for(Int_t dm: decayModes){
    
    if(dm==11 and !id.Contains("new")) continue; //id.find("new")==std::string::npos
    
    //    TString dmname    = "_dm"; dmname += dm;
    //    TString nom       = "h_"+id+wp+dmname;
    //    TString denom     = "h_"+id+"VL"+dmname;
    //    TString histname  = nom+"_"+denom;
    //    TString histname  = channel+"/"+id+"_"+wp+"overVLn"+wp+"_dm";
    TString histname  = channel+"/"+id+"_"+wp+"overVVLn"+wp+"_dm";
    histname += dm;

    std::cout << "reading fake rate histogram with name: " << histname << std::endl;

    fakeRates[id][dm] = (TGraphAsymmErrors*) file->Get(histname);
    if(dm==0) fakeRates2D[id][dm] = (TH2F*) file->Get(histname+"_eta");
    else      fakeRates2D[id][dm] = (TH2F*) file->Get(histname+"_mass");
    
    if(!fakeRates[id][dm])
      std::cout<<">>>   fakeParam.C::readFile: no fake rate graph (\""<<histname<<"\") for "<<id<<", DM"<<dm<<std::endl;
    if(!fakeRates2D[id][dm]){
      if(dm==0)
	std::cout<<">>>   fakeParam.C::readFile: no fake rate TH2F (\""<<histname<<"_eta\") for "<<id<<", DM"<<dm<<std::endl;
      else
	std::cout<<">>>   fakeParam.C::readFile: no fake rate TH2F (\""<<histname<<"_mass\") for "<<id<<", DM"<<dm<<std::endl;
    }
  }
  //  }
}



// NOMINAL fake rate vs. mass vs. pt
Float_t getFakeRate(Float_t pt, Int_t dm){
  Float_t fakeRate = 0.0;
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    fakeRate = fakeRates[id][dm]->Eval(pt);
  }
  //std::cout << ">>> getFakeRate: pt="<<pt<<", decayMode="<<dm<<", FR="<<fakeRate<<std::endl;
  return fakeRate; // TMath::Max(zero,fakeRate);
}



// NOMINAL fake rate vs. mass/eta vs. pt
Float_t getFakeRate(Float_t pt, Float_t mass, Int_t dm){
  //std::cout << ">>> getFakeRate: " << pt << ", " << mass << ", " << dm << ", " << id << std::endl;
  Float_t fakeRate = 0.0;
  if(dm==0)
    return getFakeRate(pt,dm);
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    Int_t ipt = TMath::Min(fakeRates2D[id][dm]->GetXaxis()->FindBin(pt),   fakeRates2D[id][dm]->GetXaxis()->GetNbins());
    Int_t im  = TMath::Min(fakeRates2D[id][dm]->GetYaxis()->FindBin(mass), fakeRates2D[id][dm]->GetYaxis()->GetNbins());
    fakeRate  = fakeRates2D[id][dm]->GetBinContent(ipt,im);
    while(fakeRate==0.0 and ipt>0){
      ipt -= 1;
      fakeRate = fakeRates2D[id][dm]->GetBinContent(ipt,im);
    }
  }
  //std::cout << ">>> getFakeRate: FR="<<std::setw(9)<<fakeRate<<", pt="<<std::setw(9)<<pt<<", mass="<<std::setw(9)<<mass<<", id="<<id<<std::endl;
  return fakeRate;
}

Float_t getFakeRate(Float_t pt, Float_t mass, Float_t eta, Int_t dm){
  //std::cout << ">>> getFakeRate: " << pt << ", " << mass << " / " << eta << ", " << dm << ", " << id << std::endl;
  Float_t fakeRate = 0.0;
  if(dm!=0)
    return getFakeRate(pt,mass,dm);
  if(dm==11 and !id.Contains("new")) return 0.0;
  Int_t ipt  = TMath::Min(fakeRates2D[id][0]->GetXaxis()->FindBin(pt),        fakeRates2D[id][0]->GetXaxis()->GetNbins());
  Int_t ieta = TMath::Min(fakeRates2D[id][0]->GetYaxis()->FindBin(fabs(eta)), fakeRates2D[id][0]->GetYaxis()->GetNbins());
  fakeRate   = fakeRates2D[id][0]->GetBinContent(ipt,ieta);
  while(fakeRate==0.0 and ipt>0){
    ipt -= 1;
    fakeRate = fakeRates2D[id][0]->GetBinContent(ipt,ieta);
  }
  //std::cout << ">>> getFakeRate: FR="<<std::setw(9)<<fakeRate<<", pt="<<std::setw(9)<<pt<<" (i="<<ipt<<"), eta="<<std::setw(9)<<eta<<" (i="<<ieta<<"), id="<<id<<std::endl;
  return fakeRate;
}




// DOWN fake rate vs. pt
Float_t getFakeRateDown(Float_t pt, Int_t dm){
  Float_t fakeRate = 0.0;
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    fakeRate = flatFakeRates[id][dm];
  }
  return fakeRate;
}

// DOWN fake rate vs. mass vs. pt
Float_t getFakeRateDown(Float_t pt, Float_t mass, Int_t dm){
  return getFakeRateDown(pt,dm);
}

// DOWN fake rate vs. mass/eta vs. pt
Float_t getFakeRateDown(Float_t pt, Float_t mass, Float_t eta, Int_t dm){
  return getFakeRateDown(pt,dm);
}



// UP fake rate vs. mass
Float_t getFakeRateUp(Float_t pt, Int_t dm){
  Float_t fakeRate = 0.0;
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    fakeRate = fakeRates[id][dm]->Eval(pt);
    fakeRate = 2*fakeRate - flatFakeRates[id][dm];
  }
  return fakeRate;
}

// UP fake rate vs. mass vs. pt
Float_t getFakeRateUp(Float_t pt, Float_t mass, Int_t dm){
  Float_t fakeRate = 0.0;
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    fakeRate = getFakeRate(pt,mass,dm);
    fakeRate = 2*fakeRate - flatFakeRates[id][dm];
  }
  return fakeRate;
}

// UP fake rate vs. mass/eta vs. pt
Float_t getFakeRateUp(Float_t pt, Float_t mass, Float_t eta, Int_t dm){
  Float_t fakeRate = 0.0;
  if(dm==11 and !id.Contains("new")) return 0.0;
  if(std::find(decayModes.begin(),decayModes.end(),dm)!=decayModes.end()){
    fakeRate = getFakeRate(pt,mass,eta,dm);
    fakeRate = 2*fakeRate - flatFakeRates[id][dm];
  }
  return fakeRate;
}


void fakeRateParam(){

  std::cout << ">>> initializing fakeParam.C ... " << std::endl;

}


